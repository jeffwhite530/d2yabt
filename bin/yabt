#!/usr/bin/env python3
"""This is the main file of d2yabt.  In order to use it, just run it with
PYTHONPATH set to include the location of d2yabt's library.
"""


import sys
import os
import argparse
import signal
import d2yabt



def trap_sigint(_signal_received, _frame):
	"""Instead of crashing and printing a trace, exit cleanly on CRTL+C.
	"""
	sys.exit(130)



if __name__ == "__main__":
	# What options were we called with?
	parser = argparse.ArgumentParser(description="Yet Another Bundle Tool: A tool used to analyze DC/OS diagnostic bundles")

	parser.add_argument("bundle_name", metavar="bundle_name",
							type=str, nargs="?",
							help="The bundle file or directory")

	parser.add_argument("--version", action="version", version=d2yabt.__version__)

	parser.add_argument("-x", "--extract",
							action="store_true",
							help="only extract the bundle")

	yabt_args = parser.parse_args()


	# Trap CTRL+C (SIGINT) so we exit rather than printing a trace
	signal.signal(signal.SIGINT, trap_sigint)


	# If we were not given a bundle arg, assume we're in an extracted bundle
	if yabt_args.bundle_name:
		bundle_name = yabt_args.bundle_name

		if not os.path.exists(bundle_name):
			print("No such bundle found:", bundle_name, file=sys.stderr)
			sys.exit(1)

	else:
		bundle_name = "."


	# Decompress the bundle and the files within it
	bundle_type = d2yabt.util.get_bundle_type(bundle_name)
	bundle_dir = d2yabt.util.get_bundle_dir(bundle_name)

	if os.path.isdir(bundle_name):
		pass

	elif d2yabt.util.is_bundle_extracted(bundle_name):
		print("Bundle has already been extracted, using existing directory,", bundle_dir)

	elif bundle_type == "dcos_diag":
		bundle_dir = d2yabt.dcos.bundle.extract_diag(bundle_name)
		d2yabt.util.decompress_gzip_files(bundle_dir)
		d2yabt.util.format_json(bundle_dir)

	elif bundle_type == "dcos_oneliner":
		bundle_dir = d2yabt.dcos.bundle.extract_oneliner(bundle_name)

	elif bundle_type == "service_diag":
		bundle_dir = d2yabt.service.bundle.extract(bundle_name)

	elif bundle_type == "konvoy_diag":
		bundle_dir = d2yabt.konvoy.bundle.extract(bundle_name)


	# If we were told to only extract the bundle, stop here
	if yabt_args.extract is True:
		sys.exit(0)


	# Create the node objects list
	if bundle_type in ("dcos_diag", "dcos_oneliner"):
		node_objs = d2yabt.dcos.bundle.get_nodes(bundle_dir, bundle_type)
		d2yabt.dcos.bundle.get_node_info(node_objs)
		d2yabt.dcos.bundle.print_nodes(node_objs)

	elif bundle_type == "konvoy_diag":
		node_objs = d2yabt.konvoy.bundle.get_nodes(bundle_dir)
		d2yabt.konvoy.bundle.print_nodes(node_objs)


	# Health checks
	if bundle_type == "dcos_diag":
		d2yabt.dcos.check.nodes_missing_from_bundle(node_objs, bundle_dir)
		d2yabt.dcos.check.dcos_version(node_objs)
		d2yabt.dcos.check.firewall_running(node_objs)
		d2yabt.dcos.check.state_size(node_objs)
		d2yabt.dcos.check.ntp_sync(node_objs)
		d2yabt.dcos.check.inactive_frameworks(node_objs)
		d2yabt.dcos.check.missing_dockerd(node_objs)
		d2yabt.dcos.check.unreachable_agents_mesos_state(node_objs)

	if bundle_type in ("dcos_diag", "dcos_oneliner"):
		d2yabt.dcos.check.unreachable_agents_mesos_log(node_objs)
		d2yabt.dcos.check.mesos_leader_changes(node_objs)
		d2yabt.dcos.check.zk_leader_changes(node_objs)
		d2yabt.dcos.check.marathon_leader_changes(node_objs)
		d2yabt.dcos.check.check_time_failures(node_objs)
		d2yabt.dcos.check.kmem_presence(node_objs)
		d2yabt.dcos.check.zk_fsync(node_objs)
		d2yabt.dcos.check.zk_diskspace(node_objs)
		d2yabt.dcos.check.zk_connection_exception(node_objs)
		d2yabt.dcos.check.oom_presence(node_objs)
		d2yabt.dcos.check.crdb_underrep_ranges(node_objs)
		d2yabt.dcos.check.crdb_monotonicity_error(node_objs)
		d2yabt.dcos.check.crdb_contact_error(node_objs)
		d2yabt.dcos.check.ssl_cert_error(node_objs)
		d2yabt.dcos.check.overlay_master_recovering(node_objs)

	if bundle_type == "service_diag":
		pass

	if bundle_type == "konvoy_diag":
		pass

